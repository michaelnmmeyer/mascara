
#line 1 "cmd/print_str.rl"
/* Drops excessive whitespace inside multi-word tokens. */


#line 13 "cmd/print_str.rl"



#line 11 "cmd/print_str.ic"
static const char _print_str_key_offsets[] = {
	0, 5, 12, 19, 29
};

static const unsigned char _print_str_trans_keys[] = {
	32u, 194u, 226u, 9u, 13u, 32u, 133u, 160u, 
	194u, 226u, 9u, 13u, 32u, 128u, 129u, 194u, 
	226u, 9u, 13u, 32u, 175u, 194u, 226u, 9u, 
	13u, 128u, 139u, 168u, 169u, 32u, 159u, 194u, 
	226u, 9u, 13u, 0
};

static const char _print_str_single_lengths[] = {
	3, 5, 5, 4, 4
};

static const char _print_str_range_lengths[] = {
	1, 1, 1, 3, 1
};

static const char _print_str_index_offsets[] = {
	0, 5, 12, 19, 27
};

static const char _print_str_indicies[] = {
	1, 2, 3, 1, 0, 1, 1, 1, 
	2, 3, 1, 0, 1, 4, 5, 2, 
	3, 1, 0, 1, 1, 2, 3, 1, 
	1, 1, 0, 1, 1, 2, 3, 1, 
	0, 0
};

static const char _print_str_trans_targs[] = {
	0, 0, 1, 2, 3, 4
};

static const char _print_str_trans_actions[] = {
	1, 2, 1, 1, 1, 1
};

static const int print_str_start = 0;

static const int print_str_en_main = 0;


#line 16 "cmd/print_str.rl"

static void print_str(const unsigned char *p, size_t len)
{
   int cs;
   const unsigned char *const pe = &p[len];
   const unsigned char *const eof = pe;

   
#line 66 "cmd/print_str.ic"
	{
	cs = print_str_start;
	}

#line 24 "cmd/print_str.rl"
   
#line 73 "cmd/print_str.ic"
	{
	int _klen;
	const unsigned char *_keys;
	int _trans;

	if ( p == pe )
		goto _test_eof;
_resume:
	_keys = _print_str_trans_keys + _print_str_key_offsets[cs];
	_trans = _print_str_index_offsets[cs];

	_klen = _print_str_single_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _print_str_range_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _print_str_indicies[_trans];
	cs = _print_str_trans_targs[_trans];

	if ( _print_str_trans_actions[_trans] == 0 )
		goto _again;

	switch ( _print_str_trans_actions[_trans] ) {
	case 1:
#line 11 "cmd/print_str.rl"
	{ putchar((*p)); }
	break;
	case 2:
#line 11 "cmd/print_str.rl"
	{ putchar(' '); }
#line 11 "cmd/print_str.rl"
	{ putchar((*p)); }
	break;
#line 148 "cmd/print_str.ic"
	}

_again:
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	}

#line 25 "cmd/print_str.rl"
   
   (void)eof;
}
