
#line 1 "gen/fr_suffix_match.rl"
/* Generated file, don't edit! */

#line 14 "gen/fr_suffix_match.rl"



#line 10 "gen/fr_suffix_match.ic"
static const char _fr_suffix_match_key_offsets[] = {
   0, 0, 2, 3, 9, 12, 14, 15,
   21, 25, 27, 31, 33, 35, 41, 43,
   45, 49, 51, 52, 72
};

static const unsigned char _fr_suffix_match_trans_keys[] = {
   76u, 108u, 45u, 67u, 74u, 76u, 99u, 106u,
   108u, 45u, 76u, 108u, 69u, 101u, 45u, 67u,
   79u, 85u, 99u, 111u, 117u, 77u, 84u, 109u,
   116u, 73u, 105u, 69u, 79u, 101u, 111u, 85u,
   117u, 69u, 101u, 69u, 76u, 85u, 101u, 108u,
   117u, 76u, 108u, 79u, 111u, 78u, 86u, 110u,
   118u, 84u, 116u, 195u, 65u, 69u, 73u, 76u,
   78u, 82u, 83u, 85u, 89u, 97u, 101u, 105u,
   108u, 110u, 114u, 115u, 117u, 121u, 128u, 160u,
   84u, 116u, 0
};

static const char _fr_suffix_match_single_lengths[] = {
   0, 2, 1, 6, 3, 2, 1, 6,
   4, 2, 4, 2, 2, 6, 2, 2,
   4, 2, 1, 20, 2
};

static const char _fr_suffix_match_range_lengths[] = {
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0
};

static const char _fr_suffix_match_index_offsets[] = {
   0, 0, 3, 5, 12, 16, 19, 21,
   28, 33, 36, 41, 44, 47, 54, 57,
   60, 65, 68, 70, 91
};

static const char _fr_suffix_match_indicies[] = {
   0, 0, 1, 3, 2, 0, 0, 4,
   0, 0, 4, 1, 3, 5, 5, 1,
   6, 6, 1, 7, 1, 0, 8, 9,
   0, 8, 9, 1, 0, 0, 0, 0,
   1, 6, 6, 1, 0, 6, 0, 6,
   1, 10, 10, 1, 9, 9, 1, 11,
   12, 13, 11, 12, 13, 1, 4, 4,
   1, 14, 14, 1, 0, 0, 0, 0,
   1, 0, 0, 1, 9, 1, 9, 15,
   16, 12, 17, 18, 19, 20, 0, 9,
   15, 16, 12, 17, 18, 19, 20, 0,
   21, 21, 1, 0, 0, 22, 0
};

static const char _fr_suffix_match_trans_targs[] = {
   2, 0, 19, 19, 4, 5, 6, 20,
   8, 1, 12, 14, 9, 15, 16, 3,
   7, 10, 11, 13, 17, 18, 19
};

static const char _fr_suffix_match_trans_actions[] = {
   0, 0, 1, 2, 0, 0, 0, 3,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 6
};

static const char _fr_suffix_match_to_state_actions[] = {
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 4, 0
};

static const char _fr_suffix_match_from_state_actions[] = {
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 5, 0
};

static const char _fr_suffix_match_eof_trans[] = {
   0, 0, 3, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 23
};

static const int fr_suffix_match_start = 19;

static const int fr_suffix_match_en_main = 19;


#line 17 "gen/fr_suffix_match.rl"

/* Finds the longest known suffix of a string.
 * "p" must point to the last byte in the string to examine.
 * "pe" must point to the first character of the string to examine.
 *
 * We require that a suffix doesn't match the whole string; in other words, the
 * string must have a leading part of length >= 1. This is required both because
 * we don't want a suffix to be recognized as such when it doesn't occur
 * immediately after a word, and because there is an ambiguity when a token has
 * both a prefix and a suffix but the prefix and the suffix overlap, e.g.:
 *
 *    C’s de facto packaging system
 *
 * Here C’ is a valid French prefix, and ’s is a valid English suffix. There is
 * no easy way to decide which segmentation is the best one, so we choose
 * (arbitrarily) to emit only the prefix, and treat the rest of the string as a
 * single token.
 *
 * If a suffix is found, returns its length, otherwise zero.
 */
static size_t fr_suffix(const unsigned char *p, const unsigned char *pe)
{
   int cs, act;
   const unsigned char *ts, *te;
   const unsigned char *const eof = pe;


#line 126 "gen/fr_suffix_match.ic"
   {
   cs = fr_suffix_match_start;
   ts = 0;
   te = 0;
   act = 0;
   }

#line 44 "gen/fr_suffix_match.rl"

#line 136 "gen/fr_suffix_match.ic"
   {
   int _klen;
   const unsigned char *_keys;
   int _trans;

   if ( p == pe )
      goto _test_eof;
   if ( cs == 0 )
      goto _out;
_resume:
   switch ( _fr_suffix_match_from_state_actions[cs] ) {
   case 5:
#line 1 "NONE"
   {ts = p;}
   break;
#line 152 "gen/fr_suffix_match.ic"
   }

   _keys = _fr_suffix_match_trans_keys + _fr_suffix_match_key_offsets[cs];
   _trans = _fr_suffix_match_index_offsets[cs];

   _klen = _fr_suffix_match_single_lengths[cs];
   if ( _klen > 0 ) {
      const unsigned char *_lower = _keys;
      const unsigned char *_mid;
      const unsigned char *_upper = _keys + _klen - 1;
      while (1) {
         if ( _upper < _lower )
            break;

         _mid = _lower + ((_upper-_lower) >> 1);
         if ( (*p) < *_mid )
            _upper = _mid - 1;
         else if ( (*p) > *_mid )
            _lower = _mid + 1;
         else {
            _trans += (unsigned int)(_mid - _keys);
            goto _match;
         }
      }
      _keys += _klen;
      _trans += _klen;
   }

   _klen = _fr_suffix_match_range_lengths[cs];
   if ( _klen > 0 ) {
      const unsigned char *_lower = _keys;
      const unsigned char *_mid;
      const unsigned char *_upper = _keys + (_klen<<1) - 2;
      while (1) {
         if ( _upper < _lower )
            break;

         _mid = _lower + (((_upper-_lower) >> 1) & ~1);
         if ( (*p) < _mid[0] )
            _upper = _mid - 2;
         else if ( (*p) > _mid[1] )
            _lower = _mid + 2;
         else {
            _trans += (unsigned int)((_mid - _keys)>>1);
            goto _match;
         }
      }
      _trans += _klen;
   }

_match:
   _trans = _fr_suffix_match_indicies[_trans];
_eof_trans:
   cs = _fr_suffix_match_trans_targs[_trans];

   if ( _fr_suffix_match_trans_actions[_trans] == 0 )
      goto _again;

   switch ( _fr_suffix_match_trans_actions[_trans] ) {
   case 2:
#line 11 "gen/fr_suffix_match.rl"
   {te = p-1;{ return ts + 1 - p; }}
   break;
   case 6:
#line 11 "gen/fr_suffix_match.rl"
   {te = p;p++;{ return ts + 1 - p; }}
   break;
   case 1:
#line 1 "NONE"
   {	switch( act ) {
   case 0:
   {{cs = 0; goto _again;}}
   break;
   case 1:
   {{p = ((te))+1;} return ts + 1 - p; }
   break;
   }
   }
   break;
   case 3:
#line 1 "NONE"
   {te = p-1;}
#line 11 "gen/fr_suffix_match.rl"
   {act = 1;}
   break;
#line 238 "gen/fr_suffix_match.ic"
   }

_again:
   switch ( _fr_suffix_match_to_state_actions[cs] ) {
   case 4:
#line 1 "NONE"
   {ts = 0;}
#line 1 "NONE"
   {act = 0;}
   break;
#line 249 "gen/fr_suffix_match.ic"
   }

   if ( cs == 0 )
      goto _out;
   if ( --p != pe )
      goto _resume;
   _test_eof: {}
   if ( p == eof )
   {
   if ( _fr_suffix_match_eof_trans[cs] > 0 ) {
      _trans = _fr_suffix_match_eof_trans[cs] - 1;
      goto _eof_trans;
   }
   }

   _out: {}
   }

#line 45 "gen/fr_suffix_match.rl"

   return 0;

   /* Possibly unused variables. */
   (void)act;
   (void)ts;
   (void)te;
   (void)eof;
   (void)fr_suffix_match_en_main;
   (void)_fr_suffix_match_trans_actions;
}
