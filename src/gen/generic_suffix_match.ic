
#line 1 "gen/generic_suffix_match.rl"
/* Generated file, don't edit! */

#line 14 "gen/generic_suffix_match.rl"



#line 10 "gen/generic_suffix_match.ic"
static const char _generic_suffix_match_key_offsets[] = {
	0, 0
};

static const unsigned char _generic_suffix_match_trans_keys[] = {
	0
};

static const char _generic_suffix_match_single_lengths[] = {
	0, 0
};

static const char _generic_suffix_match_range_lengths[] = {
	0, 0
};

static const char _generic_suffix_match_index_offsets[] = {
	0, 0
};

static const char _generic_suffix_match_trans_targs[] = {
	0, 0
};

static const char _generic_suffix_match_trans_actions[] = {
	0, 0
};

static const char _generic_suffix_match_to_state_actions[] = {
	0, 1
};

static const char _generic_suffix_match_from_state_actions[] = {
	0, 2
};

static const int generic_suffix_match_start = 1;

static const int generic_suffix_match_en_main = 1;


#line 17 "gen/generic_suffix_match.rl"

/* Finds the longest known suffix of a string.
 * "p" must point to the last byte in the string to examine.
 * "pe" must point to the first character of the string to examine.
 *
 * We require that a suffix doesn't match the whole string; in other words, the
 * string must have a leading part of length >= 1. This is required both because
 * we don't want a suffix to be recognized as such when it doesn't occur
 * immediately after a word, and because there is an ambiguity when a token has
 * both a prefix and a suffix but the prefix and the suffix overlap, e.g.:
 *
 *    C’s de facto packaging system
 *
 * Here C’ is a valid French prefix, and ’s is a valid English suffix. There is
 * no easy way to decide which segmentation is the best one, so we choose
 * (arbitrarily) to emit only the prefix, and treat the rest of the string as a
 * single token.
 *
 * If a suffix is found, returns its length, otherwise zero.
 */
static size_t generic_suffix(const unsigned char *p, const unsigned char *pe)
{
   int cs, act;
   const unsigned char *ts, *te;
   const unsigned char *const eof = pe;

   
#line 80 "gen/generic_suffix_match.ic"
	{
	cs = generic_suffix_match_start;
	ts = 0;
	te = 0;
	act = 0;
	}

#line 44 "gen/generic_suffix_match.rl"
   
#line 90 "gen/generic_suffix_match.ic"
	{
	int _klen;
	const unsigned char *_keys;
	int _trans;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	switch ( _generic_suffix_match_from_state_actions[cs] ) {
	case 2:
#line 1 "NONE"
	{ts = p;}
	break;
#line 106 "gen/generic_suffix_match.ic"
	}

	_keys = _generic_suffix_match_trans_keys + _generic_suffix_match_key_offsets[cs];
	_trans = _generic_suffix_match_index_offsets[cs];

	_klen = _generic_suffix_match_single_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _generic_suffix_match_range_lengths[cs];
	if ( _klen > 0 ) {
		const unsigned char *_lower = _keys;
		const unsigned char *_mid;
		const unsigned char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _generic_suffix_match_trans_targs[_trans];

	switch ( _generic_suffix_match_to_state_actions[cs] ) {
	case 1:
#line 1 "NONE"
	{ts = 0;}
	break;
#line 165 "gen/generic_suffix_match.ic"
	}

	if ( cs == 0 )
		goto _out;
	if ( --p != pe )
		goto _resume;
	_test_eof: {}
	_out: {}
	}

#line 45 "gen/generic_suffix_match.rl"

   return 0;

   /* Possibly unused variables. */
   (void)act;
   (void)ts;
   (void)te;
   (void)eof;
   (void)generic_suffix_match_en_main;
   (void)_generic_suffix_match_trans_actions;
}
